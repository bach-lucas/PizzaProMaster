{
  "tables": [
    {
      "name": "users",
      "type": "pgTable",
      "definition": "export const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull().default(\"customer\"), // \"admin_master\", \"admin\", or \"customer\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});"
    },
    {
      "name": "insertUserSchema",
      "type": "createInsertSchema",
      "definition": "export const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});"
    },
    {
      "name": "categories",
      "type": "pgTable",
      "definition": "export const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n});"
    },
    {
      "name": "insertCategorySchema",
      "type": "createInsertSchema",
      "definition": "export const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});"
    },
    {
      "name": "menuItems",
      "type": "pgTable",
      "definition": "export const menuItems = pgTable(\"menu_items\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: doublePrecision(\"price\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  categoryId: integer(\"category_id\").notNull(),\n  tags: text(\"tags\").array(),\n  available: boolean(\"available\").notNull().default(true),\n  featured: boolean(\"featured\").default(false),\n});"
    },
    {
      "name": "insertMenuItemSchema",
      "type": "createInsertSchema",
      "definition": "export const insertMenuItemSchema = createInsertSchema(menuItems).omit({\n  id: true,\n});"
    },
    {
      "name": "specialOffers",
      "type": "pgTable",
      "definition": "export const specialOffers = pgTable(\"special_offers\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: doublePrecision(\"price\").notNull(),\n  originalPrice: doublePrecision(\"original_price\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  active: boolean(\"active\").notNull().default(true),\n});"
    },
    {
      "name": "insertSpecialOfferSchema",
      "type": "createInsertSchema",
      "definition": "export const insertSpecialOfferSchema = createInsertSchema(specialOffers).omit({\n  id: true,\n});"
    },
    {
      "name": "orders",
      "type": "pgTable",
      "definition": "export const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\"),\n  items: jsonb(\"items\").notNull(), // Array of items with quantity\n  subtotal: doublePrecision(\"subtotal\").notNull(),\n  deliveryFee: doublePrecision(\"delivery_fee\").notNull(),\n  total: doublePrecision(\"total\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  paymentMethod: text(\"payment_method\").notNull(),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});"
    },
    {
      "name": "insertOrderSchema",
      "type": "createInsertSchema",
      "definition": "export const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});"
    },
    {
      "name": "addresses",
      "type": "pgTable",
      "definition": "export const addresses = pgTable(\"addresses\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(), // Foreign key to users table\n  street: text(\"street\").notNull(),\n  number: text(\"number\").notNull(),\n  complement: text(\"complement\"),\n  neighborhood: text(\"neighborhood\").notNull(),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  zipCode: text(\"zip_code\").notNull(),\n  isFavorite: boolean(\"is_favorite\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});"
    },
    {
      "name": "insertAddressSchema",
      "type": "createInsertSchema",
      "definition": "export const insertAddressSchema = createInsertSchema(addresses).omit({\n  id: true,\n  createdAt: true,\n});"
    },
    {
      "name": "adminLogs",
      "type": "pgTable",
      "definition": "export const adminLogs = pgTable(\"admin_logs\", {\n  id: serial(\"id\").primaryKey(),\n  adminId: integer(\"admin_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\").notNull(),\n  entityId: integer(\"entity_id\"),\n  details: text(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});"
    },
    {
      "name": "insertAdminLogSchema",
      "type": "createInsertSchema",
      "definition": "export const insertAdminLogSchema = createInsertSchema(adminLogs).omit({\n  id: true,\n  createdAt: true,\n});"
    },
    {
      "name": "systemSettings",
      "type": "pgTable",
      "definition": "export const systemSettings = pgTable(\"system_settings\", {\n  id: serial(\"id\").primaryKey(),\n  key: text(\"key\").notNull().unique(),\n  value: jsonb(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  updatedBy: integer(\"updated_by\").references(() => users.id),\n});"
    },
    {
      "name": "insertSystemSettingsSchema",
      "type": "createInsertSchema",
      "definition": "export const insertSystemSettingsSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  updatedAt: true,\n});"
    }
  ],
  "relations": [],
  "originalSchema": "import { pgTable, text, serial, integer, boolean, jsonb, timestamp, doublePrecision } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User model\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull().default(\"customer\"), // \"admin_master\", \"admin\", or \"customer\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Menu categories\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\n// Menu items\nexport const menuItems = pgTable(\"menu_items\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: doublePrecision(\"price\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  categoryId: integer(\"category_id\").notNull(),\n  tags: text(\"tags\").array(),\n  available: boolean(\"available\").notNull().default(true),\n  featured: boolean(\"featured\").default(false),\n});\n\nexport const insertMenuItemSchema = createInsertSchema(menuItems).omit({\n  id: true,\n});\n\n// Special offers\nexport const specialOffers = pgTable(\"special_offers\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: doublePrecision(\"price\").notNull(),\n  originalPrice: doublePrecision(\"original_price\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  active: boolean(\"active\").notNull().default(true),\n});\n\nexport const insertSpecialOfferSchema = createInsertSchema(specialOffers).omit({\n  id: true,\n});\n\n// Order status: \"pending\", \"preparing\", \"in_transit\", \"delivered\", \"cancelled\"\nexport const orders = pgTable(\"orders\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\"),\n  items: jsonb(\"items\").notNull(), // Array of items with quantity\n  subtotal: doublePrecision(\"subtotal\").notNull(),\n  deliveryFee: doublePrecision(\"delivery_fee\").notNull(),\n  total: doublePrecision(\"total\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  paymentMethod: text(\"payment_method\").notNull(),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Order item type to be stored in the order's items field\nexport const orderItemSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  price: z.number(),\n  quantity: z.number(),\n  imageUrl: z.string().optional(),\n  description: z.string().optional(),\n  specialInstructions: z.string().optional(),\n});\n\nexport type OrderItem = z.infer<typeof orderItemSchema>;\n\n// Export all types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type MenuItem = typeof menuItems.$inferSelect;\nexport type InsertMenuItem = z.infer<typeof insertMenuItemSchema>;\n\nexport type SpecialOffer = typeof specialOffers.$inferSelect;\nexport type InsertSpecialOffer = z.infer<typeof insertSpecialOfferSchema>;\n\n// Pizza Customization Schema\nexport const pizzaBaseSchema = z.object({\n  id: z.number().positive(),\n  name: z.string(),\n  description: z.string().optional(),\n  price: z.number().positive(),\n  imageUrl: z.string().optional(),\n});\n\nexport const pizzaSizeSchema = z.object({\n  id: z.number().positive(),\n  name: z.string(),\n  multiplier: z.number().positive(),\n  description: z.string().optional(),\n});\n\nexport const pizzaCrustSchema = z.object({\n  id: z.number().positive(),\n  name: z.string(),\n  price: z.number().positive(),\n  description: z.string().optional(),\n});\n\nexport const pizzaSauceSchema = z.object({\n  id: z.number().positive(),\n  name: z.string(),\n  price: z.number().positive(),\n  description: z.string().optional(),\n  imageUrl: z.string().optional(),\n});\n\nexport const pizzaToppingSchema = z.object({\n  id: z.number().positive(),\n  name: z.string(),\n  price: z.number().positive(),\n  category: z.string(),\n  description: z.string().optional(),\n  imageUrl: z.string().optional(),\n});\n\nexport const pizzaCustomizationSchema = z.object({\n  baseId: z.number().positive(),\n  sizeId: z.number().positive(),\n  crustId: z.number().positive(),\n  sauceId: z.number().positive(),\n  toppingIds: z.array(z.number().positive()),\n  specialInstructions: z.string().optional(),\n});\n\nexport type PizzaBase = z.infer<typeof pizzaBaseSchema>;\nexport type PizzaSize = z.infer<typeof pizzaSizeSchema>;\nexport type PizzaCrust = z.infer<typeof pizzaCrustSchema>;\nexport type PizzaSauce = z.infer<typeof pizzaSauceSchema>;\nexport type PizzaTopping = z.infer<typeof pizzaToppingSchema>;\nexport type PizzaCustomization = z.infer<typeof pizzaCustomizationSchema>;\n\n// Delivery addresses\nexport const addresses = pgTable(\"addresses\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(), // Foreign key to users table\n  street: text(\"street\").notNull(),\n  number: text(\"number\").notNull(),\n  complement: text(\"complement\"),\n  neighborhood: text(\"neighborhood\").notNull(),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  zipCode: text(\"zip_code\").notNull(),\n  isFavorite: boolean(\"is_favorite\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertAddressSchema = createInsertSchema(addresses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Address = typeof addresses.$inferSelect;\nexport type InsertAddress = z.infer<typeof insertAddressSchema>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\n// Audit log para ações de administradores\nexport const adminLogs = pgTable(\"admin_logs\", {\n  id: serial(\"id\").primaryKey(),\n  adminId: integer(\"admin_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\").notNull(),\n  entityId: integer(\"entity_id\"),\n  details: text(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertAdminLogSchema = createInsertSchema(adminLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type AdminLog = typeof adminLogs.$inferSelect;\nexport type InsertAdminLog = z.infer<typeof insertAdminLogSchema>;\n\n// System settings\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: serial(\"id\").primaryKey(),\n  key: text(\"key\").notNull().unique(),\n  value: jsonb(\"value\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  updatedBy: integer(\"updated_by\").references(() => users.id),\n});\n\nexport const insertSystemSettingsSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type SystemSetting = typeof systemSettings.$inferSelect;\nexport type InsertSystemSetting = z.infer<typeof insertSystemSettingsSchema>;\n\n// Business hours schema\nexport const businessHoursSchema = z.object({\n  monday: z.object({ open: z.string().optional(), close: z.string().optional(), isClosed: z.boolean().default(false) }),\n  tuesday: z.object({ open: z.string().optional(), close: z.string().optional(), isClosed: z.boolean().default(false) }),\n  wednesday: z.object({ open: z.string().optional(), close: z.string().optional(), isClosed: z.boolean().default(false) }),\n  thursday: z.object({ open: z.string().optional(), close: z.string().optional(), isClosed: z.boolean().default(false) }),\n  friday: z.object({ open: z.string().optional(), close: z.string().optional(), isClosed: z.boolean().default(false) }),\n  saturday: z.object({ open: z.string().optional(), close: z.string().optional(), isClosed: z.boolean().default(false) }),\n  sunday: z.object({ open: z.string().optional(), close: z.string().optional(), isClosed: z.boolean().default(false) }),\n  isManualClosed: z.boolean().default(false),\n});\n\n// Delivery settings schema\nexport const deliverySettingsSchema = z.object({\n  fee: z.number().min(0).default(0),\n  estimatedTime: z.number().min(0).default(0),\n  minimumOrderValue: z.number().min(0).default(0),\n  supportedNeighborhoods: z.array(z.string()).default([]),\n});\n\n// Order settings schema\nexport const orderSettingsSchema = z.object({\n  allowDelivery: z.boolean().default(true),\n  allowPickup: z.boolean().default(true),\n  estimatedPickupTime: z.number().min(0).default(0),\n});\n\n// General preferences schema\nexport const generalPreferencesSchema = z.object({\n  newOrderSound: z.boolean().default(true),\n  showAlerts: z.boolean().default(true),\n  sendCustomerNotifications: z.boolean().default(false),\n});\n\nexport type BusinessHours = z.infer<typeof businessHoursSchema>;\nexport type DeliverySettings = z.infer<typeof deliverySettingsSchema>;\nexport type OrderSettings = z.infer<typeof orderSettingsSchema>;\nexport type GeneralPreferences = z.infer<typeof generalPreferencesSchema>;\n"
}